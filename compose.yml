# The default path for a Compose file is compose.yaml (preferred) 

# version: '3.8' # It is ignored and stays for backward compability

volumes: # named volumes can be managed easier using docker-compose
  kafka-volume:
    external: false # docker expected to already exist if true
  mysql-volume:
  postgres-volume:

# Read it carefully https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode
networks: # defining user defined network adds DNS by name of the service resolver for your services
  bridge-network:
    driver: bridge
  host-network: # Directly connected to host network and no need to expose ports. Useful for VPN: Wire guard or Kamailio
    driver: host # driver means network type. you can not have 2nd host driver network as Docker by default has one created already. Thus you would need just to use it instead of creating new network. Just add: network_mode: host under your container
  macvlan-network: # Directly connected to router and have their own ip addresses and acting like virtual machines, and you have to enable promiscuous option on host and router. on host: sudo ip link set <lan name> promisc and in virtual box and NO DHCP
    driver: macvlan
    # parent=your lan name
  ipvlan-network: # like macvlan, but they allow to host to share their mac address for all ip address
    driver: ipvlan
  ipvlan-l3-network: # use level 3 network instead of 2 and use host as router and no broadcast traffic, and you have to use static network
    driver: ipvlan
    #ipvlan_mode: l3
  none-network: # fully isolated network
    driver: none
  # prod defining network ideas
  internal-network:
    driver_opts:
      com.docker.network.expose.ports: "false"
  external-network:
    driver_opts:
      com.docker.network.expose.ports: "true"
  no-network:
    driver: none


services:


  mysql:
    extends:
      service: mysql-service
      file: mysql/compose.yml
    env_file: .env
    networks:
      - internal-network
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci


  
  postgres:
    extends:
      service: postgres-service
      file: postgres/compose.yml
    env_file: .env
    networks:
      - internal-network



  wordpress:
    extends:
      service: wordpress-service
      file: wordpress/compose.yml
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    env_file: .env
    networks:
      - internal-network
      - external-network


  
  kafka-service:
    image: "bitnami/kafka:3.4.0-debian-11-r20"
    container_name: "kafka-container"
    env_file:
      - kafka/Kafka.env # See all the environment variables of postgres
    ports:
      - "9092:9092"
    volumes:
      - kafka-volume:/bitnami/kafka # persist data even if container shuts down
    networks:
      - bridge-network
    healthcheck:
      #test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic TEST_TOPIC_NAME --describe" ]
      test: [ "CMD-SHELL", "kafka-topics.sh --list  --bootstrap-server localhost:9092" ]
      start_period: 15s
      interval: 2s
      timeout: 10s
      retries: 15

  # Kouncil UI for Kafka -----------------------------------------------------------------------------
#  kouncil-service:
#    image: "consdata/kouncil:1.6-SNAPSHOT"
#    container_name: "kouncil-container"
#    env_file:
#      - kouncil/Kouncil.env
#    ports:
#      - "8082:8080"
#    networks:
#      - bridge-network
#    depends_on:
#      kafka-service:
#        condition: service_healthy

  # kpow UI for Kafka -----------------------------------------------------------------------------
#  kpow-service:
#    image: "factorhouse/kpow-ce:91.2.1"
#    container_name: "kpow-container"
#    env_file:
#      - kpow/Kpow.env
#    ports:
#      - "8083:3000"
#    networks:
#      - bridge-network
#    depends_on:
#      kafka-service:
#        condition: service_healthy

  # kafdrop UI for Kafka -----------------------------------------------------------------------------
  kafdrop-service:
    image: "obsidiandynamics/kafdrop:4.0.0-SNAPSHOT"
    container_name: "kafdrop-container"
    env_file:
      - kafdrop/Kafdrop.env
    ports:
      - "8084:9000"
    networks:
      - bridge-network
    depends_on:
      kafka-service:
        condition: service_healthy

  # Ant Media Service ------------------------------------------------------------------------
  ant-media-service:
    image: "nibrev/ant-media-server:ams-v2.5.3"
    container_name: "ant-media-container"
    restart: always #it will be restart even after restarting os or docker
    # restart after enable ssl and use 5443 port to access <https://yourdomain:5443>
    command:
      - /bin/bash
      - -c
      - |
        ./usr/local/antmedia/enable_ssl.sh <yourdomain>
    volumes:
      - ant-media-volume:/usr/local/antmedia/ # persist data even if container shuts down
    network_mode: host # Because of the nat issue you have to use host mode
    # above means that Ant Media Server uses the host network. It is required because
    # there is a wide range of UDP and TCP ports are being used for WebRTC streaming.
    #This also means that you can only use one pod of Ant Media Server in a host instance.